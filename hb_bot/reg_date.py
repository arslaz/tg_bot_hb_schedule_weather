from aiogram.fsm.context import FSMContext
from datetime import datetime

from get_keybord import *
from stategroup import *
from json_file import *

async def name_proce(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(HBBotState.main_menu)
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_hb_bot_keyboard()
        )
        return

    await state.update_data(name=message.text)
    await message.answer(
        "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1889-04-20\n",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AddBirthday.date)


async def date_proce(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(HBBotState.main_menu)
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_hb_bot_keyboard()
        )
        return

    user_id = str(message.from_user.id)
    try:
        date_str = message.text
        datetime.strptime(date_str, '%Y-%m-%d')
        await state.update_data(date=message.text)
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–û–î-–ú–ï–°–Ø–¶-–î–ï–ù–¨:\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 1889-04-20",
            reply_markup=get_cancel_keyboard()
        )
        return

    if user_id in bot_config['admin']:
        await message.answer(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ user_id –∏–ª–∏ username –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:\n"
            "(–∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç' –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–ª—è—Ç—å)",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(AddBirthday.user)
    else:
        user_data = await state.get_data()
        add_birthday(message.from_user.id, user_data['name'], user_data['date'], None)
        await state.set_state(HBBotState.main_menu)
        await message.answer(
            f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {user_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω!\n"
            f"–Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –Ω–µ–º –∑–∞—Ä–∞–Ω–µ–µ!",
            reply_markup=get_hb_bot_keyboard()
        )


async def user_proce(message: Message, state: FSMContext):
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await state.set_state(HBBotState.main_menu)
        await message.answer(
            "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            reply_markup=get_hb_bot_keyboard()
        )
        return

    user_input = message.text.lower()
    if user_input in ['–Ω–µ—Ç', 'no', 'none']:
        user_input = "None"

    await state.update_data(user=user_input)
    user_data = await state.get_data()
    add_birthday(message.from_user.id, user_data['name'], user_data['date'], user_data['user'])
    await state.set_state(HBBotState.main_menu)

    if user_data['user']:
        message_text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {user_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω!\nüë§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è: {user_data['user']}"
    else:
        message_text = f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {user_data['name']} –¥–æ–±–∞–≤–ª–µ–Ω!\nüîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã"

    await message.answer(
        message_text,
        reply_markup=get_hb_bot_keyboard()
    )